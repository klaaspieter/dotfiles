#!/bin/sh
# shellcheck disable=SC2039

# Turn your Mac into an awesome development machine.
# Largely taken from https://github.com/thoughtbot/laptop/blob/master/mac

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

# Change into the directory of the script so it can find Brewfile, Gemfile, etc
cd "$(dirname "$0")"

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle

if [ ! -d "$HOME/.asdf" ]; then
  fancy_echo "Installing asdf version manager..."
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.2
  append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi


fancy_echo "Installing asdf plugins"
install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "erlang" "https://github.com/asdf-vm/asdf-erlang.git"
install_asdf_plugin "elixir" "https://github.com/asdf-vm/asdf-elixir.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
install_asdf_plugin "python" "https://github.com/danhper/asdf-python.git"
install_asdf_plugin "golang" "https://github.com/kennyp/asdf-golang.git"
install_asdf_plugin "rust" "https://github.com/code-lever/asdf-rust.git"

fancy_echo "Installing tools in ~/.tool-versions"
rcup tool-versions
asdf install

fancy_echo "Linking dotfiles"
rcup

fancy_echo "Configuring Ruby"
gem_install_or_update "bundler"
number_of_cores=$(sysctl -n hw.ncpu)
asdf reshim ruby
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Configuring Go"
mkdir -p "$GOPATH"

fancy_echo "Installing vim plugins ..."
vim -c "PlugInstall | exit | exit"

fancy_echo "Installing coc extensions ..."
vim -c 'CocInstall coc-json coc-html coc-tsserver coc-css coc-sourcekit | exit'

if [[ ! -d ~/.tmux/plugins/tpm ]]; then
  fancy_echo "Installing tmux plugins ..."
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  ~/.tmux/plugins/tpm/bin/install_plugins
fi

XCODE_VERSION=$(xcodes list 2>/dev/null | grep -v "Beta" | tail -n1)
if [[ ${XCODE_VERSION} != *"Installed"* ]]; then
  fancy_echo "Installing latest Xcode version ($XCODE_VERSION) ..."
  xcodes install "$XCODE_VERSION"
fi

fancy_echo "Restoring system defaults ..."
./defaults
